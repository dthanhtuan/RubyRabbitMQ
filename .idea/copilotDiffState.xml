<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/controllers/application_controller.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/controllers/application_controller.rb" />
              <option name="originalContent" value="class ApplicationController &lt; ActionController::Base&#10;  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.&#10;  allow_browser versions: :modern&#10;&#10;  # Disable CSRF protection for API endpoints&#10;  skip_before_action :verify_authenticity_token&#10;end" />
              <option name="updatedContent" value="class ApplicationController &lt; ActionController::Base&#10;  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.&#10;  allow_browser versions: :modern&#10;&#10;  # Disable CSRF protection for API endpoints&#10;  skip_before_action :verify_authenticity_token&#10;end" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/config/routes.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config/routes.rb" />
              <option name="originalContent" value="Rails.application.routes.draw do&#10;  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html&#10;&#10;  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.&#10;  # Can be used by load balancers and uptime monitors to verify that the app is live.&#10;  get &quot;up&quot; =&gt; &quot;rails/health#show&quot;, as: :rails_health_check&#10;&#10;  # Render dynamic PWA files from app/views/pwa/* (remember to link manifest in application.html.erb)&#10;  # get &quot;manifest&quot; =&gt; &quot;rails/pwa#manifest&quot;, as: :pwa_manifest&#10;  # get &quot;service-worker&quot; =&gt; &quot;rails/pwa#service_worker&quot;, as: :pwa_service_worker&#10;&#10;  # Defines the root path route (&quot;/&quot;)&#10;  # root &quot;posts#index&quot;&#10;&#10;  # Work Queue Pattern - Task distribution among workers&#10;    post 'work_queues/enqueue', to: 'work_queues#enqueue'&#10;    post 'work_queues/start_worker', to: 'work_queues#start_worker'&#10;&#10;  # Pub/Sub Fanout Pattern - Broadcast to all subscribers&#10;  namespace :pub_sub do&#10;    # Fanout pattern&#10;    post 'fanout/broadcast', to: 'fanout#broadcast'&#10;    post 'fanout/start_subscriber', to: 'fanout#start_subscriber'&#10;&#10;    # Direct (Routing) pattern&#10;    post 'direct/publish', to: 'direct#publish'&#10;    post 'direct/start_subscriber', to: 'direct#start_subscriber'&#10;&#10;    # Topic pattern&#10;    post 'topic/publish', to: 'topic#publish'&#10;    post 'topic/start_subscriber', to: 'topic#start_subscriber'&#10;&#10;    # Headers pattern&#10;    post 'headers/publish', to: 'headers#publish'&#10;    post 'headers/start_subscriber', to: 'headers#start_subscriber'&#10;  end&#10;&#10;  # Single Queue Pattern - Simple 1P -&gt; 1C example&#10;  post 'single_queue/enqueue', to: 'single_queue#enqueue'&#10;  post 'single_queue/start_consumer', to: 'single_queue#start_consumer'&#10;&#10;  # Note: Routing and Topic examples are now under the pub_sub namespace as focused controllers&#10;&#10;  # Keep original messages endpoint for backward compatibility&#10;  post &quot;messages&quot;, to: &quot;single_queue#enqueue&quot;&#10;end&#10;" />
              <option name="updatedContent" value="Rails.application.routes.draw do&#10;  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html&#10;&#10;  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.&#10;  # Can be used by load balancers and uptime monitors to verify that the app is live.&#10;  get &quot;up&quot; =&gt; &quot;rails/health#show&quot;, as: :rails_health_check&#10;&#10;  # Render dynamic PWA files from app/views/pwa/* (remember to link manifest in application.html.erb)&#10;  # get &quot;manifest&quot; =&gt; &quot;rails/pwa#manifest&quot;, as: :pwa_manifest&#10;  # get &quot;service-worker&quot; =&gt; &quot;rails/pwa#service_worker&quot;, as: :pwa_service_worker&#10;&#10;  # Defines the root path route (&quot;/&quot;)&#10;  # root &quot;posts#index&quot;&#10;&#10;  # Work Queue Pattern - Task distribution among workers&#10;    post 'work_queues/enqueue', to: 'work_queues#enqueue'&#10;    post 'work_queues/start_worker', to: 'work_queues#start_worker'&#10;&#10;  # Pub/Sub Fanout Pattern - Broadcast to all subscribers&#10;  namespace :pub_sub do&#10;    # Fanout pattern&#10;    post 'fanout/broadcast', to: 'fanout#broadcast'&#10;    post 'fanout/start_subscriber', to: 'fanout#start_subscriber'&#10;&#10;    # Direct (Routing) pattern&#10;    post 'direct/publish', to: 'direct#publish'&#10;    post 'direct/start_subscriber', to: 'direct#start_subscriber'&#10;&#10;    # Topic pattern&#10;    post 'topic/publish', to: 'topic#publish'&#10;    post 'topic/start_subscriber', to: 'topic#start_subscriber'&#10;&#10;    # Headers pattern&#10;    post 'headers/publish', to: 'headers#publish'&#10;    post 'headers/start_subscriber', to: 'headers#start_subscriber'&#10;  end&#10;&#10;  # Single Queue Pattern - Simple 1P -&gt; 1C example&#10;  post 'single_queue/enqueue', to: 'single_queue#enqueue'&#10;  post 'single_queue/start_consumer', to: 'single_queue#start_consumer'&#10;&#10;  # Note: Routing and Topic examples are now under the pub_sub namespace as focused controllers&#10;&#10;  # Keep original messages endpoint for backward compatibility&#10;  post &quot;messages&quot;, to: &quot;single_queue#enqueue&quot;&#10;end" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>